# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'arayuz.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# Gerekli kütüphaneleri yükleyin
import cv2
import numpy as np
from scipy import signal

modelFile = "../face_detection//res10_300x300_ssd_iter_140000.caffemodel"
configFile = "../face_detection//deploy.prototxt.txt"
face_detector = cv2.dnn.readNetFromCaffe(configFile, modelFile)

class Ui_MainWindow(QtWidgets.QStackedWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(863, 712)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 400))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(400, 400))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 20, 811, 591))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("heartbeat-pulse-wallpaper-preview.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(250, 470, 331, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(0, 165, 165);\n"
"color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(180, 60, 451, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgb(0, 165, 165);\n"
"color: rgb(255, 255, 255);\n"
"")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 863, 26))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menubar.sizePolicy().hasHeightForWidth())
        self.menubar.setSizePolicy(sizePolicy)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.nabiz_hesapla)

        return self

    @QtCore.pyqtSlot()
    def nabiz_hesapla(self):
        print('Starting video...')

        # Video dosyasını açın
        cap = cv2.VideoCapture(0)
        rois = []

        # Nabız ölçümü için geçmiş değerleri tutacak değişkenleri tanımla
        past_pos = []
        past_bpm = []

        while True:
            # Video akışından kareleri oku
            ret, frame = cap.read()

            (h, w) = frame.shape[:2]

            # Yüz tespiti için ilgili boyuta yeniden boyutlandır
            blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 1.0, (300, 300), [104, 177, 123])

            # Modeli kullanarak yüz tespiti yap
            face_detector.setInput(blob)
            detections = face_detector.forward()

            # Tespit edilen yüzleri dolaşarak ilgi bölgesini belirle
            for i in range(detections.shape[2]):
                confidence = detections[0, 0, i, 2]

                # Güven seviyesi eşik değerinin altındaysa atla
                if confidence < 0.5:
                    continue

                # Yüz bölgesini hesapla ve dikdörtgeni çiz
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")
                # cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)

                text = '{:2f}%'.format(confidence * 100)

                if startY - 10 > 10:
                    y = startY - 10
                else:
                    y = startY + 10

                # ROI'yi belirleme
                roi_left_cheek = (int(startX + (endX - startX) / 10), int(startY + 2 * (endY - startY) / 4),
                                  int(startX + 3 * (endX - startX) / 10), int(startY + 3 * (endY - startY) / 4))
                roi_right_cheek = (int(startX + 7 * (endX - startX) / 10), int(startY + 2 * (endY - startY) / 4),
                                   int(startX + 9 * (endX - startX) / 10), int(startY + 3 * (endY - startY) / 4))
                roi_forehead = (int(startX + (endX - startX) / 6), int(startY + (endY - startY) / 10),
                                int(startX + 3 * (endX - startX) / 4), int(startY + (endY - startY) / 4))

                # Append all regions
                rois.append(roi_forehead)
                rois.append(roi_right_cheek)
                rois.append(roi_left_cheek)

                # ROI'leri dikdörtgen içinde gösterme
                cv2.rectangle(frame, (int(startX + (endX - startX) / 10), int(startY + 2 * (endY - startY) / 4)),
                              (int(startX + 3 * (endX - startX) / 10), int(startY + 3 * (endY - startY) / 4)),
                              (0, 255, 0),
                              1)  # Sol elmacık kemiği
                cv2.rectangle(frame, (int(startX + 7 * (endX - startX) / 10), int(startY + 2 * (endY - startY) / 4)),
                              (int(startX + 9 * (endX - startX) / 10), int(startY + 3 * (endY - startY) / 4)),
                              (0, 255, 0),
                              1)  # Sağ elmacık kemiği
                cv2.rectangle(frame, (int(startX + (endX - startX) / 6), int(startY + (endY - startY) / 10)),
                              (int(startX + 3 * (endX - startX) / 4), int(startY + (endY - startY) / 4)), (0, 0, 255),
                              1)  # Alın bölgesi

                cv2.putText(frame, text, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 255, 0), 1)

            # ROI bölgelerini seç
            rois_frames = [frame[y:y + h, x:x + w] for (x, y, w, h) in rois]

            # Get FPS rate
            fps = cap.get(cv2.CAP_PROP_FPS)

            # Maskeleme işlemi için renk aralığını belirle
            lower_skin = np.array([0, 40, 80], dtype=np.uint8)
            upper_skin = np.array([255, 180, 135], dtype=np.uint8)

            # POS yöntemi ile nabız ölçümü yap
            bpm_values = []
            for i, roi_frame in enumerate(rois_frames):
                # RGB maskeleme işlemini uygula
                roi_mask = cv2.inRange(roi_frame, lower_skin, upper_skin)

                # Maskeleme sonrası ROI çerçevesindeki sadece cilt piksellerini tut
                roi_frame = cv2.bitwise_and(roi_frame, roi_frame, mask=roi_mask)

                g_channel = roi_frame[:, :]  # Sadece G kanalı seçiliyor

                pos = signal.correlate2d(cv2.cvtColor(g_channel, cv2.COLOR_BGR2GRAY), np.array([[-1, 0, 1]]),
                                         mode='same')
                f_pos = np.sum(pos, axis=0)
                f_pos = signal.medfilt(f_pos, 3)

                # Nabzı hesaplayın ve listenin sonuna ekle
                bpm = int(signal.find_peaks(f_pos)[0].size * 60 / fps)
                bpm_values.append(bpm)

            # Tüm nabız değerlerini ortalamak için geçmiş nabız değerleri ile birlikte işle
            if past_pos:
                past_pos.append(bpm_values)
                past_pos.pop(0)
                mean_bpm_values = np.mean(past_pos, axis=0)
            else:
                past_pos.append(bpm_values)
                mean_bpm_values = bpm_values

            # Ortalama nabız değerini hesapla ve ekrana yazdır
            mean_bpm = int(np.mean(mean_bpm_values))
            past_bpm.append(mean_bpm)
            past_bpm = past_bpm[-30:]

            # Display HR
            cv2.putText(frame, 'BPM: ' + str(bpm), (h, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), thickness=1)

            # Display FPS Rate
            cv2.putText(frame, "FPS: " + str(int(fps)), (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 1)

            # Video akışını göster
            cv2.imshow('frame', frame)

            # Çıkış yapmak için q tuşuna bas
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        # Tüm pencereleri kapat
        cap.release()
        cv2.destroyAllWindows()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "NABIZ HESAPLA"))
        self.label_2.setText(_translate("MainWindow", "TELLİ TURNAM HR MONITORING"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
